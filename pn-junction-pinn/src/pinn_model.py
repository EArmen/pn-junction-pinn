# -*- coding: utf-8 -*-
"""Untitled146.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SvCVasckE7bwrsXZ3JZW7l6jXuQZd3vs
"""

# src/pinn_model.py
import torch
import torch.nn as nn

class PINN(nn.Module):
    def __init__(self, num_layers=5, num_units=256, sigma=0.5):
        super(PINN, self).__init__()
        self.layers = nn.ModuleList()
        self.sigma = sigma
        self.B = torch.randn(1, 10) * sigma
        self.layers.append(nn.Linear(20, num_units))
        for _ in range(num_layers - 2):
            self.layers.append(nn.Linear(num_units, num_units))
        self.layers.append(nn.Linear(num_units, 2))
        self.activation = nn.SiLU()

    def forward(self, x):
        x_fourier = torch.cat([torch.cos(2 * np.pi * x @ self.B),
                              torch.sin(2 * np.pi * x @ self.B)], dim=-1)
        h = x_fourier
        for i, layer in enumerate(self.layers[:-1]):
            h_next = self.activation(layer(h))
            if i > 0 and i < len(self.layers) - 2:
                h = h_next + h
            else:
                h = h_next
        return self.layers[-1](h)

def physics_loss(model, x, q, epsilon, N):
    # Пример функции потерь (раздел 4.3.2)
    x.requires_grad = True
    output = model(x)
    psi = output[:, 0]
    d_psi = torch.autograd.grad(psi, x, grad_outputs=torch.ones_like(psi), create_graph=True)[0]
    d2_psi = torch.autograd.grad(d_psi, x, grad_outputs=torch.ones_like(d_psi), create_graph=True)[0]
    physics_residual = d2_psi + (q * N / epsilon)
    return torch.mean(physics_residual ** 2)